const CACHE_NAME = "field-service-cache-v2"; // Cambia la versione della cache!

// Aggiungiamo i file JavaScript fingerprintati alla cache
const urlsToCache = [
  "/",
  "/tasks",  // ✅ Cache anche per la pagina tasks
  "/tasks.json", // ✅ Cache per i dati dei tasks
  "<%= asset_path('application.js') %>",
  "<%= asset_path('application.css') %>",
  "<%= asset_path('bootstrap.min.css') %>",
  "<%= asset_path('controllers/tasks_controller.js') %>", // ✅ Cache Stimulus controller
];

self.addEventListener("install", (event) => {
  console.log("🛠️ Service Worker installato!");
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return Promise.all(
        urlsToCache.map(async (url) => {
          try {
            const response = await fetch(url, { method: "GET", cache: "no-store" });
            if (!response || !response.ok || response.status === 404) {
              console.warn(`⚠️ Asset non trovato, salto il caching: ${url}`);
              return;
            }
            await cache.put(url, response.clone());
            console.log(`✅ Asset aggiunto alla cache: ${url}`);
          } catch (error) {
            console.warn(`⚠️ Errore nel caching di ${url}: ${error.message}`);
          }
        })
      );
    })
  );
  self.skipWaiting();
});

self.addEventListener("fetch", (event) => {
  const url = new URL(event.request.url);

  // Escludiamo la route /up dalla cache
  if (url.pathname === "/up") {
    return;
  }

  event.respondWith(
    fetch(event.request).catch(() => {
      return caches.match(event.request).then((response) => {
        if (response) return response;
        if (url.pathname === "/tasks") return caches.match("/tasks"); // ✅ Serve la pagina /tasks se siamo offline
        return caches.match("/");
      });
    })
  );
});

async function checkServerStatus() {
  try {
    const response = await fetch("/up", { method: "HEAD", cache: "no-store" });
    return response.ok;
  } catch (error) {
    return false;
  }
}

self.addEventListener("message", async (event) => {
  if (event.data && event.data.type === "CHECK_ONLINE") {
    const isOnline = await checkServerStatus();
    event.source.postMessage({ type: "ONLINE_STATUS", online: isOnline });
  }
});
